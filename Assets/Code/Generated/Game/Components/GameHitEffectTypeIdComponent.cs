//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherHitEffectTypeId;

    public static Entitas.IMatcher<GameEntity> HitEffectTypeId {
        get {
            if (_matcherHitEffectTypeId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.HitEffectTypeId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherHitEffectTypeId = matcher;
            }

            return _matcherHitEffectTypeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.Shoots.HitEffectTypeId hitEffectTypeId { get { return (Code.ECS.Gameplay.Features.Shoots.HitEffectTypeId)GetComponent(GameComponentsLookup.HitEffectTypeId); } }
    public Code.Gameplay.Effects.EffectTypeId HitEffectTypeId { get { return hitEffectTypeId.Value; } }
    public bool hasHitEffectTypeId { get { return HasComponent(GameComponentsLookup.HitEffectTypeId); } }

    public GameEntity AddHitEffectTypeId(Code.Gameplay.Effects.EffectTypeId newValue) {
        var index = GameComponentsLookup.HitEffectTypeId;
        var component = (Code.ECS.Gameplay.Features.Shoots.HitEffectTypeId)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Shoots.HitEffectTypeId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceHitEffectTypeId(Code.Gameplay.Effects.EffectTypeId newValue) {
        var index = GameComponentsLookup.HitEffectTypeId;
        var component = (Code.ECS.Gameplay.Features.Shoots.HitEffectTypeId)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Shoots.HitEffectTypeId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveHitEffectTypeId() {
        RemoveComponent(GameComponentsLookup.HitEffectTypeId);
        return this;
    }
}
