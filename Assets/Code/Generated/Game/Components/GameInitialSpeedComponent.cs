//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInitialSpeed;

    public static Entitas.IMatcher<GameEntity> InitialSpeed {
        get {
            if (_matcherInitialSpeed == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.InitialSpeed);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInitialSpeed = matcher;
            }

            return _matcherInitialSpeed;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.Movement.InitialSpeed initialSpeed { get { return (Code.ECS.Gameplay.Features.Movement.InitialSpeed)GetComponent(GameComponentsLookup.InitialSpeed); } }
    public float InitialSpeed { get { return initialSpeed.Value; } }
    public bool hasInitialSpeed { get { return HasComponent(GameComponentsLookup.InitialSpeed); } }

    public GameEntity AddInitialSpeed(float newValue) {
        var index = GameComponentsLookup.InitialSpeed;
        var component = (Code.ECS.Gameplay.Features.Movement.InitialSpeed)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Movement.InitialSpeed));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceInitialSpeed(float newValue) {
        var index = GameComponentsLookup.InitialSpeed;
        var component = (Code.ECS.Gameplay.Features.Movement.InitialSpeed)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Movement.InitialSpeed));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveInitialSpeed() {
        RemoveComponent(GameComponentsLookup.InitialSpeed);
        return this;
    }
}
