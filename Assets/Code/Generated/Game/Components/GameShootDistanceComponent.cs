//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherShootDistance;

    public static Entitas.IMatcher<GameEntity> ShootDistance {
        get {
            if (_matcherShootDistance == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ShootDistance);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherShootDistance = matcher;
            }

            return _matcherShootDistance;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.Shoots.ShootDistance shootDistance { get { return (Code.ECS.Gameplay.Features.Shoots.ShootDistance)GetComponent(GameComponentsLookup.ShootDistance); } }
    public float ShootDistance { get { return shootDistance.Value; } }
    public bool hasShootDistance { get { return HasComponent(GameComponentsLookup.ShootDistance); } }

    public GameEntity AddShootDistance(float newValue) {
        var index = GameComponentsLookup.ShootDistance;
        var component = (Code.ECS.Gameplay.Features.Shoots.ShootDistance)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Shoots.ShootDistance));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceShootDistance(float newValue) {
        var index = GameComponentsLookup.ShootDistance;
        var component = (Code.ECS.Gameplay.Features.Shoots.ShootDistance)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Shoots.ShootDistance));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveShootDistance() {
        RemoveComponent(GameComponentsLookup.ShootDistance);
        return this;
    }
}
