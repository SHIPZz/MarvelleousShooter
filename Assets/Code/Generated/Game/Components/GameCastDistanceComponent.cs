//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCastDistance;

    public static Entitas.IMatcher<GameEntity> CastDistance {
        get {
            if (_matcherCastDistance == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CastDistance);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCastDistance = matcher;
            }

            return _matcherCastDistance;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.TargetCollection.CastDistance castDistance { get { return (Code.ECS.Gameplay.Features.TargetCollection.CastDistance)GetComponent(GameComponentsLookup.CastDistance); } }
    public float CastDistance { get { return castDistance.Value; } }
    public bool hasCastDistance { get { return HasComponent(GameComponentsLookup.CastDistance); } }

    public GameEntity AddCastDistance(float newValue) {
        var index = GameComponentsLookup.CastDistance;
        var component = (Code.ECS.Gameplay.Features.TargetCollection.CastDistance)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.TargetCollection.CastDistance));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCastDistance(float newValue) {
        var index = GameComponentsLookup.CastDistance;
        var component = (Code.ECS.Gameplay.Features.TargetCollection.CastDistance)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.TargetCollection.CastDistance));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCastDistance() {
        RemoveComponent(GameComponentsLookup.CastDistance);
        return this;
    }
}
