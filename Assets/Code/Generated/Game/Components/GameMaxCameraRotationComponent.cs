//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMaxCameraRotation;

    public static Entitas.IMatcher<GameEntity> MaxCameraRotation {
        get {
            if (_matcherMaxCameraRotation == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MaxCameraRotation);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMaxCameraRotation = matcher;
            }

            return _matcherMaxCameraRotation;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.Cameras.MaxCameraRotation maxCameraRotation { get { return (Code.ECS.Gameplay.Features.Cameras.MaxCameraRotation)GetComponent(GameComponentsLookup.MaxCameraRotation); } }
    public float MaxCameraRotation { get { return maxCameraRotation.Value; } }
    public bool hasMaxCameraRotation { get { return HasComponent(GameComponentsLookup.MaxCameraRotation); } }

    public GameEntity AddMaxCameraRotation(float newValue) {
        var index = GameComponentsLookup.MaxCameraRotation;
        var component = (Code.ECS.Gameplay.Features.Cameras.MaxCameraRotation)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Cameras.MaxCameraRotation));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMaxCameraRotation(float newValue) {
        var index = GameComponentsLookup.MaxCameraRotation;
        var component = (Code.ECS.Gameplay.Features.Cameras.MaxCameraRotation)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Cameras.MaxCameraRotation));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMaxCameraRotation() {
        RemoveComponent(GameComponentsLookup.MaxCameraRotation);
        return this;
    }
}
