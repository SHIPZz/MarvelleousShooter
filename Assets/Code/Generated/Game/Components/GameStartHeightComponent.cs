//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherStartHeight;

    public static Entitas.IMatcher<GameEntity> StartHeight {
        get {
            if (_matcherStartHeight == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.StartHeight);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherStartHeight = matcher;
            }

            return _matcherStartHeight;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.Movement.StartHeight startHeight { get { return (Code.ECS.Gameplay.Features.Movement.StartHeight)GetComponent(GameComponentsLookup.StartHeight); } }
    public float StartHeight { get { return startHeight.Value; } }
    public bool hasStartHeight { get { return HasComponent(GameComponentsLookup.StartHeight); } }

    public GameEntity AddStartHeight(float newValue) {
        var index = GameComponentsLookup.StartHeight;
        var component = (Code.ECS.Gameplay.Features.Movement.StartHeight)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Movement.StartHeight));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceStartHeight(float newValue) {
        var index = GameComponentsLookup.StartHeight;
        var component = (Code.ECS.Gameplay.Features.Movement.StartHeight)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Movement.StartHeight));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveStartHeight() {
        RemoveComponent(GameComponentsLookup.StartHeight);
        return this;
    }
}
