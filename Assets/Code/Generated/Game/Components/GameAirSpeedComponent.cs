//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAirSpeed;

    public static Entitas.IMatcher<GameEntity> AirSpeed {
        get {
            if (_matcherAirSpeed == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AirSpeed);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAirSpeed = matcher;
            }

            return _matcherAirSpeed;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.Movement.AirSpeed airSpeed { get { return (Code.ECS.Gameplay.Features.Movement.AirSpeed)GetComponent(GameComponentsLookup.AirSpeed); } }
    public float AirSpeed { get { return airSpeed.Value; } }
    public bool hasAirSpeed { get { return HasComponent(GameComponentsLookup.AirSpeed); } }

    public GameEntity AddAirSpeed(float newValue) {
        var index = GameComponentsLookup.AirSpeed;
        var component = (Code.ECS.Gameplay.Features.Movement.AirSpeed)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Movement.AirSpeed));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAirSpeed(float newValue) {
        var index = GameComponentsLookup.AirSpeed;
        var component = (Code.ECS.Gameplay.Features.Movement.AirSpeed)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Movement.AirSpeed));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAirSpeed() {
        RemoveComponent(GameComponentsLookup.AirSpeed);
        return this;
    }
}
