//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGroundDepth;

    public static Entitas.IMatcher<GameEntity> GroundDepth {
        get {
            if (_matcherGroundDepth == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GroundDepth);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGroundDepth = matcher;
            }

            return _matcherGroundDepth;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.Collisions.GroundDepth groundDepth { get { return (Code.ECS.Gameplay.Features.Collisions.GroundDepth)GetComponent(GameComponentsLookup.GroundDepth); } }
    public float GroundDepth { get { return groundDepth.Value; } }
    public bool hasGroundDepth { get { return HasComponent(GameComponentsLookup.GroundDepth); } }

    public GameEntity AddGroundDepth(float newValue) {
        var index = GameComponentsLookup.GroundDepth;
        var component = (Code.ECS.Gameplay.Features.Collisions.GroundDepth)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Collisions.GroundDepth));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceGroundDepth(float newValue) {
        var index = GameComponentsLookup.GroundDepth;
        var component = (Code.ECS.Gameplay.Features.Collisions.GroundDepth)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Collisions.GroundDepth));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveGroundDepth() {
        RemoveComponent(GameComponentsLookup.GroundDepth);
        return this;
    }
}
