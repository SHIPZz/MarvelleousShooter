//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAnimationFadeDuration;

    public static Entitas.IMatcher<GameEntity> AnimationFadeDuration {
        get {
            if (_matcherAnimationFadeDuration == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AnimationFadeDuration);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAnimationFadeDuration = matcher;
            }

            return _matcherAnimationFadeDuration;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.Animations.AnimationFadeDuration animationFadeDuration { get { return (Code.ECS.Gameplay.Features.Animations.AnimationFadeDuration)GetComponent(GameComponentsLookup.AnimationFadeDuration); } }
    public float AnimationFadeDuration { get { return animationFadeDuration.Value; } }
    public bool hasAnimationFadeDuration { get { return HasComponent(GameComponentsLookup.AnimationFadeDuration); } }

    public GameEntity AddAnimationFadeDuration(float newValue) {
        var index = GameComponentsLookup.AnimationFadeDuration;
        var component = (Code.ECS.Gameplay.Features.Animations.AnimationFadeDuration)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Animations.AnimationFadeDuration));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAnimationFadeDuration(float newValue) {
        var index = GameComponentsLookup.AnimationFadeDuration;
        var component = (Code.ECS.Gameplay.Features.Animations.AnimationFadeDuration)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Animations.AnimationFadeDuration));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAnimationFadeDuration() {
        RemoveComponent(GameComponentsLookup.AnimationFadeDuration);
        return this;
    }
}
