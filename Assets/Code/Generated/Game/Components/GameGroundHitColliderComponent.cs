//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGroundHitCollider;

    public static Entitas.IMatcher<GameEntity> GroundHitCollider {
        get {
            if (_matcherGroundHitCollider == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GroundHitCollider);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGroundHitCollider = matcher;
            }

            return _matcherGroundHitCollider;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Gameplay.Features.Collisions.GroundHitCollider groundHitCollider { get { return (Code.ECS.Gameplay.Features.Collisions.GroundHitCollider)GetComponent(GameComponentsLookup.GroundHitCollider); } }
    public bool hasGroundHitCollider { get { return HasComponent(GameComponentsLookup.GroundHitCollider); } }

    public GameEntity AddGroundHitCollider(UnityEngine.Collider newCollider) {
        var index = GameComponentsLookup.GroundHitCollider;
        var component = (Code.ECS.Gameplay.Features.Collisions.GroundHitCollider)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Collisions.GroundHitCollider));
        component.Collider = newCollider;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceGroundHitCollider(UnityEngine.Collider newCollider) {
        var index = GameComponentsLookup.GroundHitCollider;
        var component = (Code.ECS.Gameplay.Features.Collisions.GroundHitCollider)CreateComponent(index, typeof(Code.ECS.Gameplay.Features.Collisions.GroundHitCollider));
        component.Collider = newCollider;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveGroundHitCollider() {
        RemoveComponent(GameComponentsLookup.GroundHitCollider);
        return this;
    }
}
